react code frontent.
import { useQuery } from "@tanstack/react-query";
import { SubjectWithTopics } from "@shared/schema";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { differenceInDays, format, parseISO } from "date-fns";

const Exams = () => {
  const { data: subjects, isLoading } = useQuery<SubjectWithTopics[]>({
    queryKey: ["/api/subjects-with-topics"],
  });
  
  // Filter subjects with exam dates and sort by date (closest first)
  const upcomingExams = subjects
    ?.filter(subject => subject.examDate)
    .sort((a, b) => {
      if (!a.examDate || !b.examDate) return 0;
      return new Date(a.examDate).getTime() - new Date(b.examDate).getTime();
    });
  
  // Group exams by month for better organization
  const examsByMonth: Record<string, SubjectWithTopics[]> = {};
  
  upcomingExams?.forEach(subject => {
    if (!subject.examDate) return;
    
    const date = new Date(subject.examDate);
    const monthYear = format(date, 'MMMM yyyy');
    
    if (!examsByMonth[monthYear]) {
      examsByMonth[monthYear] = [];
    }
    
    examsByMonth[monthYear].push(subject);
  });
  
  // Function to determine urgency level
  const getUrgencyLevel = (examDate: Date) => {
    const daysUntilExam = differenceInDays(new Date(examDate), new Date());
    
    if (daysUntilExam <= 7) return "high";
    if (daysUntilExam <= 14) return "medium";
    return "low";
  };
  
  // Function to get urgency color
  const getUrgencyColor = (examDate: Date) => {
    const urgency = getUrgencyLevel(examDate);
    
    switch (urgency) {
      case "high": return "text-red-500";
      case "medium": return "text-orange-500";
      case "low": return "text-green-500";
      default: return "text-gray-500";
    }
  };
  
  // Function to format days until exam
  const formatDaysUntil = (examDate: Date) => {
    const daysUntilExam = differenceInDays(new Date(examDate), new Date());
    
    if (daysUntilExam === 0) return "Today";
    if (daysUntilExam === 1) return "Tomorrow";
    return `${daysUntilExam} days`;
  };

  return (
    <main className="flex-grow p-4 bg-gray-50 overflow-auto">
      <div className="container mx-auto">
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Upcoming Exams</h1>
          <p className="text-gray-500 mt-1">View and manage your exam schedule.</p>
        </div>
        
        {isLoading ? (
          <div className="flex justify-center py-20">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
          </div>
        ) : !upcomingExams || upcomingExams.length === 0 ? (
          <div className="text-center py-20 bg-white rounded-lg shadow">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-gray-400 mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
              <line x1="16" y1="2" x2="16" y2="6" />
              <line x1="8" y1="2" x2="8" y2="6" />
              <line x1="3" y1="10" x2="21" y2="10" />
            </svg>
            <h2 className="text-xl font-semibold text-gray-700 mb-2">No Exams Scheduled</h2>
            <p className="text-gray-500 max-w-md mx-auto">
              You haven't set any exam dates yet. Add exam dates to your subjects to see them here.
            </p>
          </div>
        ) : (
          <div className="space-y-8">
            {Object.entries(examsByMonth).map(([monthYear, exams]) => (
              <div key={monthYear}>
                <h2 className="text-xl font-semibold text-gray-800 mb-4">{monthYear}</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {exams.map(subject => (
                    <Card key={subject.id} className="flex">
                      <div 
                        className="w-2 flex-shrink-0"
                        style={{ backgroundColor: subject.color }}
                      ></div>
                      <div className="flex-grow">
                        <CardHeader className="pb-2">
                          <CardTitle className="flex justify-between">
                            <span>{subject.name}</span>
                            {subject.examDate && (
                              <span className={`text-sm font-normal ${getUrgencyColor(subject.examDate)}`}>
                                {formatDaysUntil(subject.examDate)}
                              </span>
                            )}
                          </CardTitle>
                          <CardDescription>
                            {subject.examDate && format(new Date(subject.examDate), 'EEEE, MMMM d, yyyy')}
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-500">Difficulty:</span>
                            <span className="font-medium">{subject.difficulty}</span>
                          </div>
                          <div className="flex justify-between text-sm mt-1">
                            <span className="text-gray-500">Topics:</span>
                            <span className="font-medium">{subject.topics.length}</span>
                          </div>
                          <div className="flex justify-between text-sm mt-1">
                            <span className="text-gray-500">Completed:</span>
                            <span className="font-medium">
                              {subject.topics.filter(t => t.completed).length}/{subject.topics.length}
                            </span>
                          </div>
                        </CardContent>
                      </div>
                    </Card>
                  ))}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </main>
  );
};

export default Exams;
